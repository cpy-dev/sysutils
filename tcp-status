#!/usr/bin/python3

import socket as sk
from _thread import start_new_thread
import time
import sys
import subprocess

ip = '192.168.1.230'

def downServer():
    start_new_thread(downClient, ())

    server = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    server.setsockopt(sk.SOL_SOCKET, sk.SO_REUSEADDR, 1)
    server.bind((ip, 6433))

    server.listen(1)
    client, _ = server.accept()

    before = time.time()
    client.recv(1024)
    after = time.time()
    client.close()
    server.close()
    return 1 / (after - before)


def downClient():

    client = sk.socket(sk.AF_INET, sk.SOCK_STREAM)

    while True:
        try:

            client.connect((ip, 6433))
        except:
            pass
        else:

            break
    client.sendencode())
    client.close()


def upServer():
    server = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    server.setsockopt(sk.SOL_SOCKET, sk.SO_REUSEADDR, 1)
    server.bind((ip, 6433))

    server.listen(1)
    client, _ = server.accept()

    client.sendencode())
    server.close()


def upClient():
    start_new_thread(upServer, ())
    client = sk.socket(sk.AF_INET, sk.SOCK_STREAM)
    while True:
        try:
            client.connect((ip, 6433))
        except:
            pass
        else:
            break

    before = time.time()
    client.recv(1024)
    after = time.time()
    client.close()
    return 1 / (after - before)

def upTest():
    start_new_thread(upServer, ())
    upClient()

def downTest():
    start_new_thread(downServer, ())
    downClient()

UPSPEED = upClient()
DOWNSPEED = downServer()

print(f'TCP network speed: upload ->\033[92m {str(UPSPEED)[0:7] if UPSPEED != None else "null"} kBps\033[00m || download ->\033[92m {str(DOWNSPEED)[0:7] if DOWNSPEED != None else "null"} kBps \033[00m')
